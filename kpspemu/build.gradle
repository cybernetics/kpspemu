dependencies {
    commonMainApi "com.soywiz:korge:$korgeVersion"
    commonMainApi "com.soywiz:krypto:$kryptoVersion"

    commonMainApi project(":dynarek2")
    commonMainApi project(":korau-atrac3plus")
}

def dump(obj) {
    obj.properties.each { println "$it.key : ${it.value.class.name}   ->   $it.value" }
}

//dump(kotlin.targets.jvm.compilations.main.output)

//dump(kotlin.targets.macosX64.compilations.main.output.resourcesDir)

def mainClassName = "com.soywiz.kpspemu.MainKt"

task run(type: JavaExec, dependsOn: [jvmMainClasses], group: 'application', description: 'Run the application on the JVM') {
    main = mainClassName
    classpath { [
            kotlin.targets.jvm.compilations.main.output.allOutputs.files,
            configurations.jvmRuntimeClasspath,
    ] }
    args = []
    workingDir rootProject.rootDir
}

// @TODO: Do not depend on jvmProcessResources
task copyNativeResourcesDebug(type: Copy, dependsOn: [jvmProcessResources]) {
    from kotlin.targets.jvm.compilations.main.output.resourcesDir
    into file("$buildDir/bin/macosX64/main/debug/executable")
}

task copyNativeResourcesRelease(type: Copy, dependsOn: [jvmProcessResources]) {
    from kotlin.targets.jvm.compilations.main.output.resourcesDir
    into file("$buildDir/bin/macosX64/main/release/executable")
}

task copyNativeResources(dependsOn: [copyNativeResourcesDebug, copyNativeResourcesRelease]) {
}

afterEvaluate {
    linkDebugExecutableMacosX64.finalizedBy(copyNativeResourcesDebug)
    linkReleaseExecutableMacosX64.finalizedBy(copyNativeResourcesRelease)
}


//kotlin.targets {
//    configure([macosX64/*, linuxX64*/, mingwX64]) {
//        compilations.main.outputKinds('EXECUTABLE')
//        //compilations.main.entryPoint = "com.soywiz.kpspemu.Main.main"
//        //compilations.main.entryPoint = "com.soywiz.kpspemu"
//    }
//}

apply plugin: 'java'

jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/*

apply plugin: 'application'

mainClassName = 'com.soywiz.kpspemu.MainKt'

task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = mainClassName

    // arguments to pass to the application
    workingDir rootProject.rootDir
}





 */